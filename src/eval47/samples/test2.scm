(define (is-sex-legal guy)
  (>= (object-get guy "age") 14))

(define (check-sex-legal guy)
  (cond ((is-sex-legal guy) (display (object-get guy "name") " is legal to have sex with\n"))
        (else (display "you cannot have sex with " (object-get guy "name") "\n"))
  )
)

(define (application-start)
  (define pair (cons 1 2))
  (display "the pair is: (" (car pair) " . " (cdr pair) ")\n")
  (display "now setting the first element of pair to be 3\n")
  (set-car! pair 3)
  (display "the pair is: (" (car pair) " . " (cdr pair) ")\n")
  (display "now setting the second element of pair to be 4\n")
  (set-cdr! pair 4)
  (display "the pair is: (" (car pair) " . " (cdr pair) ")\n")
  (display "\n")

  (define vec (vector 1 2 3 4))
  (display "the vector is: " vec "\n")
  (display "the length of the vector is: " (vector-length vec) "\n")
  (display "the first element of the vector is: " (vector-ref vec 0) "\n")
  (display "the last element of the vector is: " (vector-ref vec (- (vector-length vec) 1)) "\n")
  (display "now setting the 0th element of vector to be 5\n")
  (vector-set! vec 0 5)
  (display "the vector is: " vec "\n")
  (display "the first element of the vector is: = " (vector-ref vec 0) "\n")
  (display "\n")

  (define obj (object))
  (object-set! obj "name" "John")
  (object-set! obj "age" 30)

  (display "obj.name is: " (object-get obj "name") "\n")
  (display "obj.age is: " (object-get obj "age") "\n")
  (check-sex-legal obj)

  (display "now setting obj.name to be \"Jane\"\n")
  (object-set! obj "name" "Jane")
  (display "obj.name is: " (object-get obj "name") "\n")
  (display "now setting obj.age to be 13\n")
  (object-set! obj "age" 13)
  (display "obj.age is: " (object-get obj "age") "\n")
  (check-sex-legal obj)
)
